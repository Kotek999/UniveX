{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"textColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\", \"testID\"],\n  _excluded2 = [\"fontSize\", \"fontWeight\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, OUTLINE_MINIMIZED_LABEL_Y_OFFSET, LABEL_PADDING_TOP, MIN_DENSE_HEIGHT_OUTLINED, LABEL_PADDING_TOP_DENSE } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder, calculateOutlinedIconAndAffixTopPosition, getOutlinedInputColors, getConstants } from \"./helpers\";\nimport InputLabel from \"./Label/InputLabel\";\nimport LabelBackground from \"./Label/LabelBackground\";\nvar TextInputOutlined = function TextInputOutlined(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n  var _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    _ref$editable = _ref.editable,\n    editable = _ref$editable === void 0 ? true : _ref$editable,\n    label = _ref.label,\n    _ref$error = _ref.error,\n    error = _ref$error === void 0 ? false : _ref$error,\n    selectionColor = _ref.selectionColor,\n    _underlineColor = _ref.underlineColor,\n    customOutlineColor = _ref.outlineColor,\n    activeOutlineColor = _ref.activeOutlineColor,\n    textColor = _ref.textColor,\n    dense = _ref.dense,\n    style = _ref.style,\n    theme = _ref.theme,\n    _ref$render = _ref.render,\n    render = _ref$render === void 0 ? function (props) {\n      return React.createElement(NativeTextInput, props);\n    } : _ref$render,\n    _ref$multiline = _ref.multiline,\n    multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n    parentState = _ref.parentState,\n    innerRef = _ref.innerRef,\n    onFocus = _ref.onFocus,\n    forceFocus = _ref.forceFocus,\n    onBlur = _ref.onBlur,\n    onChangeText = _ref.onChangeText,\n    onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n    onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n    onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n    left = _ref.left,\n    right = _ref.right,\n    placeholderTextColor = _ref.placeholderTextColor,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'text-input-outlined' : _ref$testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var adornmentConfig = getAdornmentConfig({\n    left: left,\n    right: right\n  });\n  var colors = theme.colors,\n    isV3 = theme.isV3,\n    roundness = theme.roundness;\n  var font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  var hasActiveOutline = parentState.focused || error;\n  var _getConstants = getConstants(isV3),\n    INPUT_PADDING_HORIZONTAL = _getConstants.INPUT_PADDING_HORIZONTAL,\n    MIN_HEIGHT = _getConstants.MIN_HEIGHT,\n    ADORNMENT_OFFSET = _getConstants.ADORNMENT_OFFSET;\n  var _ref4 = StyleSheet.flatten(style) || {},\n    fontSizeStyle = _ref4.fontSize,\n    fontWeight = _ref4.fontWeight,\n    lineHeight = _ref4.lineHeight,\n    height = _ref4.height,\n    _ref4$backgroundColor = _ref4.backgroundColor,\n    backgroundColor = _ref4$backgroundColor === void 0 ? colors === null || colors === void 0 ? void 0 : colors.background : _ref4$backgroundColor,\n    textAlign = _ref4.textAlign,\n    viewStyle = _objectWithoutProperties(_ref4, _excluded2);\n  var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  var _getOutlinedInputColo = getOutlinedInputColors({\n      activeOutlineColor: activeOutlineColor,\n      customOutlineColor: customOutlineColor,\n      textColor: textColor,\n      disabled: disabled,\n      error: error,\n      theme: theme\n    }),\n    inputTextColor = _getOutlinedInputColo.inputTextColor,\n    activeColor = _getOutlinedInputColo.activeColor,\n    outlineColor = _getOutlinedInputColo.outlineColor,\n    placeholderColor = _getOutlinedInputColo.placeholderColor,\n    errorColor = _getOutlinedInputColo.errorColor;\n  var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (I18nManager.getConstants().isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  var labelTranslationXOffset = 0;\n  var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n    var side = _ref2.side,\n      type = _ref2.type;\n    return side === AdornmentSide.Left && type === AdornmentType.Icon;\n  });\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (I18nManager.getConstants().isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n  var minInputHeight = (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - LABEL_PADDING_TOP;\n  var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    label: label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  var pad = calculatePadding(paddingSettings);\n  var paddingOut = adjustPaddingOut(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  };\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: placeholderStyle,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    backgroundColor: backgroundColor,\n    errorColor: errorColor,\n    labelTranslationXOffset: labelTranslationXOffset,\n    roundness: roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID: testID\n  };\n  var minHeight = height || (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT);\n  var outlinedHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE / 2 : LABEL_PADDING_TOP : 0);\n  var leftLayout = parentState.leftLayout,\n    rightLayout = parentState.rightLayout;\n  var leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    mode: 'outlined',\n    isV3: isV3\n  });\n  var affixTopPosition = (_affixTopPosition = {}, _defineProperty(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, _defineProperty(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, _defineProperty(_topPosition, AdornmentType.Icon, iconTopPosition), _defineProperty(_topPosition, AdornmentType.Affix, affixTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n      left: left,\n      right: right,\n      textStyle: _objectSpread(_objectSpread({}, font), {}, {\n        fontSize: fontSize,\n        lineHeight: lineHeight,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n  return React.createElement(View, {\n    style: viewStyle\n  }, React.createElement(Outline, {\n    isV3: isV3,\n    roundness: roundness,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), React.createElement(View, null, React.createElement(View, {\n    style: [styles.labelContainer, {\n      paddingTop: LABEL_PADDING_TOP,\n      minHeight: minHeight\n    }]\n  }, React.createElement(InputLabel, {\n    parentState: parentState,\n    labelProps: labelProps,\n    labelBackground: LabelBackground,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({\n    testID: testID\n  }, rest), {}, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, _objectSpread(_objectSpread({}, font), {}, {\n      fontSize: fontSize,\n      lineHeight: lineHeight,\n      fontWeight: fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.getConstants().isRTL ? 'right' : 'left',\n      paddingHorizontal: INPUT_PADDING_HORIZONTAL\n    }), Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(TextInputAdornment, adornmentProps)));\n};\nexport default TextInputOutlined;\nvar Outline = function Outline(_ref3) {\n  var isV3 = _ref3.isV3,\n    activeColor = _ref3.activeColor,\n    backgroundColor = _ref3.backgroundColor,\n    hasActiveOutline = _ref3.hasActiveOutline,\n    focused = _ref3.focused,\n    outlineColor = _ref3.outlineColor,\n    roundness = _ref3.roundness;\n  return React.createElement(View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline,\n    {\n      backgroundColor: backgroundColor,\n      borderRadius: roundness,\n      borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\nvar styles = StyleSheet.create({\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"sources":["TextInputOutlined.tsx"],"names":["React","AdornmentType","AdornmentSide","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_DENSE_HEIGHT_OUTLINED","LABEL_PADDING_TOP_DENSE","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","interpolatePlaceholder","calculateOutlinedIconAndAffixTopPosition","getOutlinedInputColors","getConstants","InputLabel","LabelBackground","TextInputOutlined","disabled","editable","label","error","selectionColor","underlineColor","_underlineColor","outlineColor","customOutlineColor","activeOutlineColor","textColor","dense","style","theme","render","props","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","testID","rest","adornmentConfig","colors","isV3","roundness","font","fonts","bodyLarge","regular","hasActiveOutline","focused","INPUT_PADDING_HORIZONTAL","MIN_HEIGHT","ADORNMENT_OFFSET","fontSize","fontSizeStyle","fontWeight","lineHeight","height","backgroundColor","background","textAlign","viewStyle","StyleSheet","flatten","inputTextColor","activeColor","placeholderColor","errorColor","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","placeholderStyle","position","paddingHorizontal","labelProps","wiggleOffsetX","maxFontSizeMultiplier","minHeight","outlinedHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","labelContainer","paddingTop","ref","placeholder","underlineColorAndroid","input","color","textAlignVertical","outline","Outline","borderRadius","borderWidth","borderColor","create","top","bottom","paddingBottom","flexGrow","margin","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\n\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  LABEL_PADDING_TOP,\n  MIN_DENSE_HEIGHT_OUTLINED,\n  LABEL_PADDING_TOP_DENSE,\n} from './constants';\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n  getOutlinedInputColors,\n  getConstants,\n} from './helpers';\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  textColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  testID = 'text-input-outlined',\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, isV3, roundness } = theme;\n  const font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const { INPUT_PADDING_HORIZONTAL, MIN_HEIGHT, ADORNMENT_OFFSET } =\n    getConstants(isV3);\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    lineHeight,\n    height,\n    backgroundColor = colors?.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const {\n    inputTextColor,\n    activeColor,\n    outlineColor,\n    placeholderColor,\n    errorColor,\n  } = getOutlinedInputColors({\n    activeOutlineColor,\n    customOutlineColor,\n    textColor,\n    disabled,\n    error,\n    theme,\n  });\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.getConstants().isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.getConstants().isRTL ? -1 : 1) *\n      (ADORNMENT_SIZE + ADORNMENT_OFFSET - (isV3 ? 0 : 8));\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const placeholderStyle = {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  };\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT_OUTLINED : MIN_HEIGHT)) as number;\n\n  const outlinedHeight =\n    inputHeight +\n    (!height ? (dense ? LABEL_PADDING_TOP_DENSE / 2 : LABEL_PADDING_TOP) : 0);\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: outlinedHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n      isV3,\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, lineHeight, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        isV3={isV3}\n        roundness={roundness}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          <InputLabel\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n          {render?.({\n            testID,\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                lineHeight,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.getConstants().isRTL\n                  ? 'right'\n                  : 'left',\n                paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  isV3: boolean;\n  activeColor: string;\n  backgroundColor: ColorValue;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  roundness?: number;\n};\n\nconst Outline = ({\n  isV3,\n  activeColor,\n  backgroundColor,\n  hasActiveOutline,\n  focused,\n  outlineColor,\n  roundness,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: roundness,\n        borderWidth: (isV3 ? hasActiveOutline : focused) ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}